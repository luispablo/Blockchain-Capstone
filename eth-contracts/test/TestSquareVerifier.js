
const fs = require("fs");

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('SquareVerifier');

contract('SquareVerifier', accounts => {

  const account_one = accounts[0];

  const { proof, inputs } = JSON.parse(fs.readFileSync("../zokrates/code/square/proof.json"));

  describe('SquareVerifier contract tests', function () {
    beforeEach(async function () { 
        this.contract = await SquareVerifier.new({from: account_one});
    })

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it("Verifies correct proof", async function () {
      let res = await this.contract.verifyTx.call(proof, inputs);
      assert(res, "proof is correct");
    });
    
        
    // Test verification with incorrect proof
    it('Verifies incorrect proof', async function () { 
      const invalidProof = { a: proof.c, b: proof.b, c: proof.a };
      let res = await this.contract.verifyTx.call(invalidProof, inputs);
      assert.notOk(res, "proof is incorrect");
    });
  });
});

